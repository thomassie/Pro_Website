# scale_fill_manual(values = c("#B78A3F", "#58758C")) +
scale_fill_manual(values = c("#FF281E", "#0090CF")) +
coord_flip()
plot.duration.storm.1 <- insert_xaxis_grob(plot.duration.storm.main,
plot.duration.storm.dens.x,
grid::unit(0.2, "null"),
position = "top")
plot.duration.storm.2 <- insert_yaxis_grob(plot.duration.storm.1,
plot.duration.storm.dens.y,
grid::unit(.2, "null"),
position = "right")
ggdraw(plot.duration.storm.2)
plot.duration.storm.main <- ggplot(data = dd.sum,
aes(x = MinPressureAfter/MaxDuration *100,
y = MinPressure)) +
geom_vline(xintercept = 0, size = 0.8, colour = "#3C3C3C") +
geom_point(aes(colour = Ocean,
size = MaxWindKPH),
# size = MaxWindKPH^4/100000),
show.legend = TRUE,
# size = 0.8,
alpha = 0.2) +
# geom_smooth(method = "lm",
#             color = "#333333") +
labs(x = "Duration at lowest minimum pressure in relation to total duration (%)",
y = "Minimum central pressure (mbar)",
title = expression("When do storms reach their maximum intensity?"),
subtitle = expression("Most storms are at their maximum intensity at around half-time."),
caption = "Source: NOAA's National Hurricane Center (http://www.nhc.noaa.gov/data/)") +
theme(axis.text = element_text(family = "Varela Round"),
axis.text.x = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 1),
axis.text.y = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 0.5),
axis.ticks = element_line(colour = "#D7D8D8", size = 0.2),
axis.ticks.length = unit(5, "mm"),
axis.line = element_blank(),
plot.title = element_text(face = "bold", hjust = 0, vjust = 0, colour = "#3C3C3C", size = 20),
plot.subtitle = element_text(hjust = 0, vjust = 0.5, colour = "#3C3C3C", size = 11),
plot.caption = element_text(size = 8, hjust = 1.6, vjust = -0.1, colour = "#7F8182"),
panel.background = element_rect(fill = "#FAFAF2"),
panel.border = element_blank(),
plot.background = element_rect(fill = "#FAFAF2", colour = "#FAFAF2"),
panel.grid.major = element_line(colour = "#D7D8D8", size = 0.2),
panel.grid.minor = element_line(colour = "#D7D8D8", size = 0.2)) +
theme(legend.justification=c(0,1),
# legend.title = element_blank(),
legend.position=c(1.02, 0.3),
legend.background = element_blank(),
# legend.key = element_blank(),
legend.text = element_text(size = 10)) +
labs(colour = "Ocean",
size = "Wind speed (km/h)") +
# geom_text(data = dd.lines, aes(label = year(int), x = int, y = -Inf), angle = 0, inherit.aes = F, hjust = -0.2, vjust = -36, size = 3.5) +
# ggpubr::color_palette("jco") +
# scale_colour_manual(values = c("#B78A3F", "#58758C")) +
scale_colour_manual(values = c("#FF281E", "#0090CF")) +
# rremove("legend") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
# A density plot on top of the main plot.
# TREAT the date.time AS NUMERIC!!!
plot.duration.storm.dens.x <- axis_canvas(plot.duration.storm.main, axis = "x") +
geom_density(data = dd.sum, aes(x = MinPressureAfter/MaxDuration *100, fill = Ocean),
alpha = 0.6, size = 0.2) +
# geom_histogram(data = dd.sum, aes(x = MinPressureAfter/MaxDuration *100, fill = Ocean),
#                alpha = 0.6, size = 0.2,
#                binwidth = 2) +
# ggpubr::color_palette("jco")
# scale_fill_manual(values = c("#B78A3F", "#58758C"))
scale_fill_manual(values = c("#FF281E", "#0090CF"))
# ...and one on the right site.
plot.duration.storm.dens.y <- axis_canvas(plot.duration.storm.main, axis = "y", coord_flip = TRUE) +
geom_density(data = dd.sum, aes(x = MinPressure, fill = Ocean),
alpha = 0.6, size = 0.2) +
# geom_histogram(data = dd.sum, aes(x = MinPressure, fill = Ocean),
#                alpha = 0.6, size = 0.2,
#                binwidth = 2) +
# ggpubr::color_palette("jco") +
# scale_fill_manual(values = c("#B78A3F", "#58758C")) +
scale_fill_manual(values = c("#FF281E", "#0090CF")) +
coord_flip()
plot.duration.storm.1 <- insert_xaxis_grob(plot.duration.storm.main,
plot.duration.storm.dens.x,
grid::unit(0.2, "null"),
position = "top")
plot.duration.storm.2 <- insert_yaxis_grob(plot.duration.storm.1,
plot.duration.storm.dens.y,
grid::unit(.2, "null"),
position = "right")
ggdraw(plot.duration.storm.2)
plot.duration.storm.main <- ggplot(data = dd.sum,
aes(x = MinPressureAfter/MaxDuration *100,
y = MinPressure)) +
geom_vline(xintercept = 0, size = 0.8, colour = "#3C3C3C") +
geom_point(aes(colour = Ocean,
size = MaxWindKPH),
# size = MaxWindKPH^4/100000),
show.legend = TRUE,
# size = 0.8,
alpha = 0.2) +
# geom_smooth(method = "lm",
#             color = "#333333") +
labs(x = "Duration at lowest minimum pressure in relation to total duration (%)",
y = "Minimum central pressure (mbar)",
title = expression("When do storms reach their maximum intensity?"),
subtitle = expression("Most storms are at their maximum intensity at around half-time."),
caption = "Source: NOAA's National Hurricane Center (http://www.nhc.noaa.gov/data/)") +
theme(axis.text = element_text(family = "Varela Round"),
axis.text.x = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 1),
axis.text.y = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 0.5),
axis.ticks = element_line(colour = "#D7D8D8", size = 0.2),
axis.ticks.length = unit(5, "mm"),
axis.line = element_blank(),
plot.title = element_text(face = "bold", hjust = 0, vjust = 0, colour = "#3C3C3C", size = 20),
plot.subtitle = element_text(hjust = 0, vjust = 0.5, colour = "#3C3C3C", size = 11),
plot.caption = element_text(size = 8, hjust = 1.6, vjust = -0.1, colour = "#7F8182"),
panel.background = element_rect(fill = "#FAFAF2"),
panel.border = element_blank(),
plot.background = element_rect(fill = "#FAFAF2", colour = "#FAFAF2"),
panel.grid.major = element_line(colour = "#D7D8D8", size = 0.2),
panel.grid.minor = element_line(colour = "#D7D8D8", size = 0.2)) +
theme(legend.justification=c(0,1),
# legend.title = element_blank(),
legend.position=c(1.02, 0.3),
legend.background = element_blank(),
legend.title=element_text(size=10),
# legend.key = element_blank(),
legend.text = element_text(size = 10)) +
labs(colour = "Ocean",
size = expression("Wind speed \n(km/h)")) +
# geom_text(data = dd.lines, aes(label = year(int), x = int, y = -Inf), angle = 0, inherit.aes = F, hjust = -0.2, vjust = -36, size = 3.5) +
# ggpubr::color_palette("jco") +
# scale_colour_manual(values = c("#B78A3F", "#58758C")) +
scale_colour_manual(values = c("#FF281E", "#0090CF")) +
# rremove("legend") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
# A density plot on top of the main plot.
# TREAT the date.time AS NUMERIC!!!
plot.duration.storm.dens.x <- axis_canvas(plot.duration.storm.main, axis = "x") +
geom_density(data = dd.sum, aes(x = MinPressureAfter/MaxDuration *100, fill = Ocean),
alpha = 0.6, size = 0.2) +
# geom_histogram(data = dd.sum, aes(x = MinPressureAfter/MaxDuration *100, fill = Ocean),
#                alpha = 0.6, size = 0.2,
#                binwidth = 2) +
# ggpubr::color_palette("jco")
# scale_fill_manual(values = c("#B78A3F", "#58758C"))
scale_fill_manual(values = c("#FF281E", "#0090CF"))
# ...and one on the right site.
plot.duration.storm.dens.y <- axis_canvas(plot.duration.storm.main, axis = "y", coord_flip = TRUE) +
geom_density(data = dd.sum, aes(x = MinPressure, fill = Ocean),
alpha = 0.6, size = 0.2) +
# geom_histogram(data = dd.sum, aes(x = MinPressure, fill = Ocean),
#                alpha = 0.6, size = 0.2,
#                binwidth = 2) +
# ggpubr::color_palette("jco") +
# scale_fill_manual(values = c("#B78A3F", "#58758C")) +
scale_fill_manual(values = c("#FF281E", "#0090CF")) +
coord_flip()
plot.duration.storm.1 <- insert_xaxis_grob(plot.duration.storm.main,
plot.duration.storm.dens.x,
grid::unit(0.2, "null"),
position = "top")
plot.duration.storm.2 <- insert_yaxis_grob(plot.duration.storm.1,
plot.duration.storm.dens.y,
grid::unit(.2, "null"),
position = "right")
ggdraw(plot.duration.storm.2)
plot.duration.storm.main <- ggplot(data = dd.sum,
aes(x = MinPressureAfter,
y = MinPressure)) +
geom_vline(xintercept = 0, size = 0.8, colour = "#3C3C3C") +
geom_point(aes(colour = Ocean,
size = MaxWindKPH),
# size = MaxWindKPH^4/100000),
show.legend = TRUE,
# size = 0.8,
alpha = 0.2) +
# geom_smooth(method = "lm",
#             color = "#333333") +
labs(x = "Duration at lowest minimum pressure (days)",
y = "Minimum central pressure (mbar)",
title = expression("When do storms reach their maximum intensity?"),
subtitle = expression("Most storms show their lowest minimum \npressure briefly after they built up."),
caption = "Source: NOAA's National Hurricane Center (http://www.nhc.noaa.gov/data/)") +
theme(axis.text = element_text(family = "Varela Round"),
axis.text.x = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 1),
axis.text.y = element_text(size = 11, colour = "#3C3C3C", face = "bold", vjust = 0.5),
axis.ticks = element_line(colour = "#D7D8D8", size = 0.2),
axis.ticks.length = unit(5, "mm"),
axis.line = element_blank(),
plot.title = element_text(face = "bold", hjust = 0, vjust = -0.5, colour = "#3C3C3C", size = 20),
plot.subtitle = element_text(hjust = 0.9, vjust = -7, colour = "#3C3C3C", size = 11),
plot.caption = element_text(size = 8, hjust = 1.6, vjust = -0.1, colour = "#7F8182"),
panel.background = element_rect(fill = "#FAFAF2"),
panel.border = element_blank(),
plot.background = element_rect(fill = "#FAFAF2", colour = "#FAFAF2"),
panel.grid.major = element_line(colour = "#D7D8D8", size = 0.2),
panel.grid.minor = element_line(colour = "#D7D8D8", size = 0.2)) +
theme(legend.justification=c(0,1),
# legend.title = element_blank(),
legend.position=c(1.02, 0.3),
legend.background = element_blank(),
legend.title=element_text(size=10),
# legend.key = element_blank(),
legend.text = element_text(size = 10)) +
labs(colour = "Ocean",
size = expression("Wind speed \n(km/h)")) +
# geom_text(data = dd.lines, aes(label = year(int), x = int, y = -Inf), angle = 0, inherit.aes = F, hjust = -0.2, vjust = -36, size = 3.5) +
# ggpubr::color_palette("jco") +
# scale_colour_manual(values = c("#B78A3F", "#58758C")) +
scale_colour_manual(values = c("#FF281E", "#0090CF")) +
# rremove("legend") +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
# A density plot on top of the main plot.
# TREAT the date.time AS NUMERIC!!!
plot.duration.storm.dens.x <- axis_canvas(plot.duration.storm.main, axis = "x") +
geom_density(data = dd.sum, aes(x = MinPressureAfter, fill = Ocean),
alpha = 0.6, size = 0.2) +
# ggpubr::color_palette("jco")
# scale_fill_manual(values = c("#B78A3F", "#58758C"))
scale_fill_manual(values = c("#FF281E", "#0090CF"))
# ...and one on the right site.
plot.duration.storm.dens.y <- axis_canvas(plot.duration.storm.main, axis = "y", coord_flip = TRUE) +
geom_density(data = dd.sum, aes(x = MinPressure, fill = Ocean),
alpha = 0.6, size = 0.2) +
# ggpubr::color_palette("jco") +
# scale_fill_manual(values = c("#B78A3F", "#58758C")) +
scale_fill_manual(values = c("#FF281E", "#0090CF")) +
coord_flip()
plot.duration.storm.1 <- insert_xaxis_grob(plot.duration.storm.main,
plot.duration.storm.dens.x,
grid::unit(0.2, "null"),
position = "top")
plot.duration.storm.2 <- insert_yaxis_grob(plot.duration.storm.1,
plot.duration.storm.dens.y,
grid::unit(.2, "null"),
position = "right")
ggdraw(plot.duration.storm.2)
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
source('~/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io/_knitr/render_post.R', echo=TRUE)
KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
# KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
#   if(!'package:knitr' %in% search()) library('knitr')
KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
KnitPost <- function(site.path='/pathToYourBlog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
# KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
KnitPost()
KnitPost <- function(site.path="/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io", overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
# KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
KnitPost()
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io"
rmd.path <- paste0(site.path, "_knitr")
KnitPost <- function(site.path = "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io",
overwriteAll=F,
overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
# KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne) == F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
KnitPost
KnitPost()
KnitPost
KnitPost()
KnitPost <- function(site.path = "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io",
overwriteAll=F,
overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- "/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io" # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_knitr") # directory where your Rmd-files reside (relative to base)
fig.dir <- "_figures" # directory to save figures
# posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
posts.path <- paste0(site.path) # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne) == F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
KnitPost
KnitPost(StormDataPreparation.Rmd)
getwd()
setwd(/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io)
setwd("/Users/Thomas/Library/Mobile Documents/com~apple~CloudDocs/WebsiteGitHub/thomassie.github.io")
KnitPost()
